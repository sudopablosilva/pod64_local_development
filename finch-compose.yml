services:
  # LocalStack for AWS services simulation
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=dynamodb,sqs,s3,lambda
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - TMPDIR=/tmp/localstack-tmp
    volumes:
      - ./localstack:/etc/localstack/init/ready.d
      - localstack-data:/var/lib/localstack
    networks:
      - app-network

  # Web Dashboard - Modern UX Dashboard
  web-dashboard:
    build: 
      context: ./web-dashboard
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      - localstack
      - jmi
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Control-M Service
  control-m:
    build: 
      context: ./control-m
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SERVICE_PORT=8080
      - SQS_QUEUE_URL=http://localstack:4566/000000000000/job-requests
    depends_on:
      - localstack
    networks:
      - app-network

  # Job Manager Integrator (JMI) - Port 4333 to match collection.json
  jmi:
    build: 
      context: ./jmi
      dockerfile: Dockerfile
    ports:
      - "4333:8080"
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SERVICE_PORT=8080
      - DYNAMODB_TABLE=jobs
      - EXECUTION_TABLE=executions
      - SQS_QUEUE_URL=http://localstack:4566/000000000000/job-requests
      - JMW_QUEUE_URL=http://localstack:4566/000000000000/jmw-queue
      - PROCESSING_DELAY_MS=3000  # Latência artificial em milissegundos (0 = sem delay)
    depends_on:
      - localstack
    networks:
      - app-network

  # Job Manager Worker (JMW) - Port 8080 to match startRoutine.sh
  jmw:
    build: 
      context: ./jmw
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SERVICE_PORT=8080
      - DYNAMODB_TABLE=executions
      - JMW_QUEUE_URL=http://localstack:4566/000000000000/jmw-queue
      - JMR_QUEUE_URL=http://localstack:4566/000000000000/jmr-queue
      - PROCESSING_DELAY_MS=3000  # Latência artificial em milissegundos
    depends_on:
      - localstack
    networks:
      - app-network

  # Job Manager Runner (JMR)
  jmr:
    build: 
      context: ./jmr
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SERVICE_PORT=8080
      - DYNAMODB_TABLE=executions
      - JMR_QUEUE_URL=http://localstack:4566/000000000000/jmr-queue
      - SP_QUEUE_URL=http://localstack:4566/000000000000/sp-queue
      - PROCESSING_DELAY_MS=3000  # Latência artificial em milissegundos
    depends_on:
      - localstack
    networks:
      - app-network

  # Scheduler Plugin (SP)
  scheduler-plugin:
    build: 
      context: ./scheduler-plugin
      dockerfile: Dockerfile
    ports:
      - "8085:8080"
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SERVICE_PORT=8080
      - DYNAMODB_TABLE=schedules
      - SP_QUEUE_URL=http://localstack:4566/000000000000/sp-queue
      - SPA_QUEUE_URL=http://localstack:4566/000000000000/spa-queue
    depends_on:
      - localstack
    networks:
      - app-network

  # Scheduler Plugin Adapter (SPA) - Ports 4444 and 4446 to match collection.json
  spa:
    build: 
      context: ./spa
      dockerfile: Dockerfile
    ports:
      - "4444:8080"
      - "4446:8080"
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SERVICE_PORT=8080
      - DYNAMODB_TABLE=adapters
      - SPA_QUEUE_URL=http://localstack:4566/000000000000/spa-queue
      - SPAQ_QUEUE_URL=http://localstack:4566/000000000000/spaq-queue
      - PROCESSING_DELAY_MS=3000  # Latência artificial em milissegundos
    depends_on:
      - localstack
    networks:
      - app-network

  # Scheduler Plugin Adapter Queue (SPAQ)
  spaq:
    build: 
      context: ./spaq
      dockerfile: Dockerfile
    ports:
      - "8087:8080"
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SERVICE_PORT=8080
      - DYNAMODB_TABLE=queue_messages
      - SPAQ_QUEUE_URL=http://localstack:4566/000000000000/spaq-queue
      - PROCESSING_DELAY_MS=3000  # Latência artificial em milissegundos
    depends_on:
      - localstack
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  localstack-data:
