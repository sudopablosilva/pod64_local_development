name: EKS Cluster Auto Scaling

permissions:
  contents: write
  
on:
  schedule:
    # Monday at 7am - Scale out
    - cron: '0 7 * * 1'
    # Friday at 8pm - Scale in
    - cron: '0 20 * * 5'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-scaling-values:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: feature/control-plane-ops
          fetch-depth: 0
          # token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Set scaling parameters based on day and time
        id: set-scaling
        run: |
          # Get current day of week (1-7, where 1 is Monday)
          DAY=$(date +%u)
          # Get current hour (0-23)
          HOUR=$(date +%H)
          
          # For testing purposes, determine operation based on workflow_dispatch or schedule
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Allow manual selection via input when manually triggered
            OPERATION="${{ github.event.inputs.operation || 'scale-out' }}"
          else
            # Default based on schedule
            if [[ "${{ github.event.schedule }}" == "0 7 * * 1" ]]; then
              OPERATION="scale-out"
            else
              OPERATION="scale-in"
            fi
          fi
          
          # Set values based on operation
          if [[ "$OPERATION" == "scale-in" ]]; then
            MIN=0
            DESIRED=0
            MAX=0
          else
            MIN=3
            DESIRED=3
            MAX=10
          fi
          
          echo "min=$MIN" >> $GITHUB_OUTPUT
          echo "desired=$DESIRED" >> $GITHUB_OUTPUT
          echo "max=$MAX" >> $GITHUB_OUTPUT
          echo "operation=$OPERATION" >> $GITHUB_OUTPUT

      - name: Create Python script to update YAML
        run: |
          cat > update_yaml.py << 'EOF'
          import yaml
          import sys

          def update_shard_values(file_path, min_val, desired_val, max_val):
              # Load the YAML file
              with open(file_path, 'r') as file:
                  data = yaml.safe_load(file)
              
              # Make a copy of the original data for comparison
              original_data = yaml.safe_dump(data)
              
              # Find and update shard "0" values
              if 'shardMapping' in data:
                  for shard in data['shardMapping']:
                      if shard.get('shard') == "0":
                          print(f"Found shard '0', updating values...")
                          shard['eksAsgMin'] = int(min_val)
                          shard['eksAsgDesired'] = int(desired_val)
                          shard['eksAsgMax'] = int(max_val)
                          break
                  else:
                      print("WARNING: Could not find shard '0' in the file")
              else:
                  print("WARNING: No 'shardMapping' section found in the file")
              
              # Write the updated YAML back to the file
              with open(file_path, 'w') as file:
                  yaml.dump(data, file, default_flow_style=False, sort_keys=False)
              
              # Check if changes were made
              new_data = yaml.safe_dump(data)
              if original_data == new_data:
                  print("No changes were made to the file")
              else:
                  print(f"Successfully updated shard '0' values to: Min={min_val}, Desired={desired_val}, Max={max_val}")

          if __name__ == "__main__":
              if len(sys.argv) != 5:
                  print("Usage: python update_yaml.py <file_path> <min> <desired> <max>")
                  sys.exit(1)
                  
              file_path = sys.argv[1]
              min_val = sys.argv[2]
              desired_val = sys.argv[3]
              max_val = sys.argv[4]
              
              update_shard_values(file_path, min_val, desired_val, max_val)
          EOF
          
          chmod +x update_yaml.py

      - name: Update platform-values.yaml for shard 0 only
        run: |
          FILE_PATH="platform/prod/prod/gitops/iac-bootstrap/platform-values.yaml"
          
          # Make a backup of the original file
          cp "$FILE_PATH" "${FILE_PATH}.bak"
          
          # Run the Python script to update the YAML file
          python update_yaml.py "$FILE_PATH" \
            ${{ steps.set-scaling.outputs.min }} \
            ${{ steps.set-scaling.outputs.desired }} \
            ${{ steps.set-scaling.outputs.max }}
          
          # Show the changes made
          echo "=== Changes made to the file ==="
          diff "${FILE_PATH}.bak" "$FILE_PATH" || true
          echo "=== End of changes ==="

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Auto ${{ steps.set-scaling.outputs.operation }}: Update EKS scaling parameters for shard 0"
          branch: feature/control-plane-ops
          file_pattern: platform/prod/prod/gitops/iac-bootstrap/platform-values.yaml
          commit_user_name: GitHub Actions
          commit_user_email: github-actions@github.com
          commit_author: GitHub Actions <github-actions@github.com>
